/*
 * Copyright 2022 Viascom Ltd liab. Co
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE OR REPLACE FUNCTION nanoid(size int DEFAULT 21, alphabet text DEFAULT '_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    RETURNS text
    LANGUAGE plpgsql stable
    AS
$$
DECLARE
    idBuilder text := '';
    i int := 0;
    bytes bytea;
    alphabetIndex int;
    mask int;
    step int;
BEGIN
    mask := (2 << cast(floor(log(length(alphabet) - 1) / log(2)) as int)) -1;
    step := cast(ceil(1.6 * mask * size / length(alphabet)) AS int);

    while true loop
            bytes := gen_random_bytes(size);
            while i < size loop
                    alphabetIndex := get_byte(bytes, i) & mask;
                    if alphabetIndex < length(alphabet) then
                        idBuilder := idBuilder || substr(alphabet, alphabetIndex, 1);
                        if length(idBuilder) = size then
                            return idBuilder;
                        end if;
                    end if;
                    i = i + 1;
                end loop;

            i := 0;
        end loop;
END
$$;

DROP FUNCTION count_poll_votes;
DROP TABLE public.votes;
DROP TABLE public.polls;

CREATE TABLE IF NOT EXISTS public.polls
(
    id text NOT NULL DEFAULT nanoid(5, '346789ABCDEFGHJKLMNPQRTUVWXYabcdefghijkmnpqrtwxyz'),
    title text COLLATE pg_catalog."default" NOT NULL,
    options text[] COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    close_at timestamp with time zone NOT NULL DEFAULT (now() + '1 day'::interval),
    is_unlisted boolean DEFAULT false,
    allow_multiple_answers boolean DEFAULT false,
    user_id uuid,
    CONSTRAINT polls_pkey PRIMARY KEY (id),
    CONSTRAINT polls_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.polls
    OWNER to postgres;

ALTER TABLE IF EXISTS public.polls
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.polls TO anon;

GRANT ALL ON TABLE public.polls TO authenticated;

GRANT ALL ON TABLE public.polls TO postgres;

GRANT ALL ON TABLE public.polls TO service_role;
CREATE POLICY "Enable read access to all users"
    ON public.polls
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TABLE IF NOT EXISTS public.votes
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    poll_id text NOT NULL,
    user_id uuid,
    option text COLLATE pg_catalog."default",
    CONSTRAINT votes_pkey PRIMARY KEY (id),
    CONSTRAINT votes_poll_id_fkey FOREIGN KEY (poll_id)
        REFERENCES public.polls (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT votes_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.votes
    OWNER to postgres;

ALTER TABLE IF EXISTS public.votes
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.votes TO anon;

GRANT ALL ON TABLE public.votes TO authenticated;

GRANT ALL ON TABLE public.votes TO postgres;

GRANT ALL ON TABLE public.votes TO service_role;
CREATE POLICY "Enable read access to all users"
    ON public.votes
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE OR REPLACE function count_poll_votes(poll text)
RETURNS TABLE(option text, votes int)
LANGUAGE SQL
AS $$
    SELECT DISTINCT ON (option) option, votes
    FROM (
      SELECT option, count(*) as votes FROM public.votes WHERE "poll_id" = poll GROUP BY option
      UNION
      SELECT option, 0 as votes FROM public.polls, unnest("options") AS "option" WHERE "id" = poll
    ) AS t
    ORDER BY option, votes DESC;
$$;
